
Flux 是一种应用架构，或者说是一种思想或模式而不是一个正式的框架，它跟 React 本身没什么关系，它可以用在 React 上，也可以用在别的框架上。Flux 在 
React 中主要用来统一管理引起 state 变化的情况。Flux 维护着一个或者多个叫做 Store 的变量，就像 MVC 里面的 Model，里面存放着应用用到的所有数据，
当一个事件触发时 ，Flux 对事件进行处理，对 Store 进行更新，当 Store 发生变化时，通常是由应用的根组件（也叫 controller view）去获取最新的 store，
然后更新 state，之后利用 React 单向数据流的特点一层层将新的 state 向下传递实现 view 的更新。这里的 controller view 可以有多个也可以不是根组件，
但是这样数据流维护起来就比较麻烦。

https://img-blog.csdn.net/20170527112310848?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3BpbGxlZHllYXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast
Dispatcher就像一个中心枢纽所有数据的流动都要通过这里。Action来源于用户与views的交互行为，Action触发Dispatcher。Dipatcher分发这个事件给对应的Store(通过之前注册的回调函数callback)。Store在修改State后触发一个”change”事件通知controller-views数据发生变化了。controller-views监听这些”change”事件并且从stores暴露的函数中获取(新)数据，然后调用自己的setState()方法，rerender自己和它的子组件。

Dispatcher 
事Dispatcher是Flux应用中管理所有数据流的中心枢纽。它本质上就是一些Store回调函数的注册器，它本身没有其他逻辑 - 
只是提供了把Action分发给Store的机制。dispatcher根据action 
type调用对应的回调函数。每一个Store都在Dispatcher注册(AppDispatcher.register)并提供回调函数。随着应用的发展，Dispatcher会变得越来越重要。例如
Dispatcher可以用来管理Stores之间的依赖关系，通过特定的顺序来调用注册了的回调函数就可以办到。Stores可以等到其他Stores完成更新再进行自己的更新操作。
Store 
Store负责封装应用的业务逻辑跟数据的交互，包含应用所有的数据，是应用中唯一的数据发生变更的地方。Store中没有赋值接口，所有数据变更都是由dispatcher
发送到store，新的数据随着Store触发的change事件传回view。Store对外只暴露getter，不允许提供setter，禁止在任何地方直接操作Store。
Views和Controller-Views React在View(MVC)层提供了可组合的可自由重新渲染的Views， 
在嵌套的views结构顶部， 一个特别的view监听着stores广播的事件， 
我们管这种view叫controller-view。在controller-view中我们完成这样的操作:：从stores中获取数据并且传递这些数据的到它的子代中. 
我们总有一个这样的controller-view控制页面的某一部分。 
当controller-view接受到store广播的事件，它首先从store的公共getter方法中获取它需要的新数据，然后调起setState()或者forceUpdate()方法，那么它和它
所有子代的render()方法都会运行。 
我们常常把整个store的state放在一个对象里面传递到子代中，让子代选择自己需要的东西。这样除了可以在层级结构顶层保持控制(controller)行为因此尽可能保证
子代views的单一功能外，还可以减少我们需要管理的属性(props)的数目。 
有时候我们可能需要在层级结构的某一层建立另外的一些controller-view使一些组件能简单些。这样可以帮助我们更好地去封装层级上的与特定的数据有关联的一些模
块。请注意，在不是顶层建立一个controller-view会破坏单项数据流这个原则，因为有可能会存在数据入口的冲突。在做这样的决定之前，我们可以衡量一下得到一个
简单一点的组件和多重数据流多个数据更新入口孰轻孰重。多重数据流会有一些副作用: 
React的render()方法会因为不同的controller-view的数据更新而多次被处罚, 会增加debug的难度。
